[tool.poetry]
name = "dapla-auth-client"
version = "1.0.1"
description = "Dapla Auth Client"
authors = ["Dapla Developers <dapla-platform-developers@ssb.no>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/statisticsnorway/dapla-auth-client"
repository = "https://github.com/statisticsnorway/dapla-auth-client"
documentation = "https://statisticsnorway.github.io/dapla-auth-client"
classifiers = ["Development Status :: 5 - Production/Stable"]
packages = [{include = "dapla_auth_client", from = "src"}]

[tool.poetry.urls]
Changelog = "https://github.com/statisticsnorway/dapla-auth-client/releases"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
requests = ">=2.27.1"
google-auth = ">=2.40.2"
pytest = "^8.4.0"
deprecated = "^1.2.18"
types-requests = ">=2.28.11"
responses = ">=0.24.0"
types-deprecated = "^1.2.15.20250304"

[tool.poetry.group.dev.dependencies]
pygments = ">=2.10.0"
black = { extras = ["jupyter"], version = ">=23.1.0" }
coverage = { extras = ["toml"], version = ">=6.2" }
darglint = ">=1.8.1"
furo = ">=2021.11.12"
mypy = ">=0.930"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
ruff = ">=0.0.284"
pytest = ">=6.2.5"
sphinx = ">=6.2.1"
sphinx-autobuild = ">=2021.3.14"
sphinx-autodoc-typehints = ">=1.24.0"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = { extras = ["colors"], version = ">=0.15.10" }
myst-parser = { version = ">=0.16.1" }
types-requests = ">=2.28.11"
responses = ">=0.24.0"

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.poetry.scripts]
dapla-auth-client = "dapla_auth_client.__main__:main"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["dapla_auth_client", "tests"]
relative_files = true

[tool.coverage.report]
show_missing = true
fail_under = 80

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true

[tool.ruff]
force-exclude = true  # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py311"  # Minimum Python version supported
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    "old",
    ".ipynb_checkpoints",
    "noxfile.py",
    "docs/conf.py",
]

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = [
    "A",   # prevent using keywords that clobber python builtins
    "ANN", # check type annotations
    "B",   # bugbear: security warnings
    "D",   # documentation
    "E",   # pycodestyle
    "F",   # pyflakes
    "ISC", # implicit string concatenation
    "I",   # sort imports
    "UP",  # alert you when better syntax is available in your python version
    "RUF", # the ruff developer's own rules
]
ignore = [
    "ANN101", # Supress missing-type-self.
    "ANN102", # Supress missing-type-cls.
    "ANN202", # Don't requiere return type annotation for private functions.
    "ANN401", # Allow type annotation with type Any.
    "D100",   # Supress undocumented-public-module. Only doc of public api required.
    "E402",   # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
    "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
    "UP007",  # ADDED MANUALLY - makes it possible to use the Optional[] syntax
    "B904",
    "ANN003",
    "ANN002",
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"  # You can also use "numpy".

[tool.ruff.lint.pylint]
max-args = 8

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/*" = [
    "ANN001",  # type annotations don't add value for test functions
    "ANN002",  # type annotations don't add value for test functions
    "ANN003",  # type annotations don't add value for test functions
    "ANN201",  # type annotations don't add value for test functions
    "ANN204",  # type annotations don't add value for test functions
    "ANN205",  # type annotations don't add value for test functions
    "ANN206",  # type annotations don't add value for test functions
    "D100",    # docstrings are overkill for test functions
    "D101",
    "D102",
    "D103",
    "S101",    # asserts are encouraged in pytest
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
